#!groovy

@Library("Infrastructure")

def type = "java"
def product = "sscs"
def component = "hmc-stub"

def vaultOverrides = [
  'preview' : 'aat'
]

def secrets = [
  'sscs-${env}' : [
    secret('idam-s2s-api', 'IDAM_S2S_URL'),
    secret('caseworker-ref-api', 'CASEWORKER_REF_API_URL'),
    secret('idam-api', 'IDAM_API_URL'),
    secret('ccd-api', 'CORE_CASE_DATA_API_URL'),
    secret('judicial-ref-api', 'JUDICIAL_REF_API_URL'),
    secret('idam-sscs-systemupdate-user', 'IDAM_SSCS_SYSTEMUPDATE_USER'),
    secret('idam-sscs-systemupdate-password', 'IDAM_SSCS_SYSTEMUPDATE_PASSWORD'),
    secret('sscs-s2s-secret', 'IDAM_S2S_AUTH_TOTP_SECRET'),
    secret('s2s-micro', 'IDAM_S2S_AUTH_MICROSERVICES'),
    secret('AppInsightsInstrumentationKey', 'APPINSIGHTS_INSTRUMENTATION_KEY'),
    secret('common-ref-data-api', 'COMMON_REF_API_URL')
  ],
  's2s-${env}' : []
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline(type, product, component) {
  env.JAVA_HOME = "/usr/lib/jvm/java-17-openjdk-amd64"
  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)

  afterAlways('securitychecks') {
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/",
      reportFiles          : 'dependency-check-report.html',
      reportName           : 'Dependency Check Report'
    ])
  }

  afterAlways('test') {
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/test/",
      reportFiles          : 'index.html',
      reportName           : 'Unit Test Report'
    ])
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/integration/",
      reportFiles          : 'index.html',
      reportName           : 'Integration Test Report'
    ])
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/integration/",
      reportFiles          : 'index.html',
      reportName           : 'Unit Test Report'
    ])
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/pmd/",
      reportFiles          : 'main.html,test.html,integrationTest.html,contractTest.html,smokeTest.html,functionalTest.html',
      reportName           : 'PMD Report'
    ])
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/checkstyle/",
      reportFiles          : 'main.html,test.html,integrationTest.html,contractTest.html,smokeTest.html,functionalTest.html',
      reportName           : 'Checkstyle Report'
    ])
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'
  }

  afterAlways('sonarscan') {
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/jacoco/test/html/",
      reportFiles          : 'index.html,jacoco-sessions.html',
      reportName           : 'Jacoco Test Coverage Report'
    ])
  }

  afterAlways('smoketest:aat') {
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/smoke/",
      reportFiles          : 'index.html',
      reportName           : 'Smoke Test Report'
    ])
  }

  afterAlways('smoketest:preview') {
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/smoke/",
      reportFiles          : 'index.html',
      reportName           : 'Smoke Test Report'
    ])
  }

  afterAlways('functionalTest:aat') {
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/functional/",
      reportFiles          : 'index.html',
      reportName           : 'Functional Test Report'
    ])
  }

  afterAlways('functionalTest:preview') {
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/functional/",
      reportFiles          : 'index.html',
      reportName           : 'Functional Test Report'
    ])
  }
}
